//*****************************************************************************
//
// stage 1
//
// Author		: kitazawa taichi
//
//*****************************************************************************

//*****************************************************************************
// include
//*****************************************************************************
#include "stage_01.h"
#include "stage_factory.h"
#include "object/map.h"
#include "object/stage_offset.h"
#include "system/system.h"

//*****************************************************************************
// constant definition
//*****************************************************************************

//=============================================================================
// constructor
//=============================================================================
StageOne::StageOne(void)
	:NormalStage(TYPE_STAGE1)
{
}

//=============================================================================
// destructor
//=============================================================================
StageOne::~StageOne(void)
{
}

//=============================================================================
// initialize
//=============================================================================
bool StageOne::Initialize(void)
{
	GET_BGM->Play(BGM::BGM_ID_STAGE_01);
	NormalStage::Initialize();

	map_ = new Map();

	if(!SafeInitialize(map_))
	{
		return false;
	}

	map_->LoadFromFile("data/map/romann.bin");

	stage_offset_->__stage_size(map_->__size());

	LoadFromFile("data/script/roman.csv");

	return true;
}

//=============================================================================
// uninitialize
//=============================================================================
void StageOne::Uninitialize(void)
{
	NormalStage::Uninitialize();
}

//=============================================================================
// update
//=============================================================================
void StageOne::Update(void)
{
	NormalStage::Update();
}

//=============================================================================
// draw
//=============================================================================
void StageOne::Draw(void)
{
	NormalStage::Draw();
}

//=============================================================================
// create factory
//=============================================================================
StageFactory* StageOne::CreateFactory(void)const
{
	return new StageOneFactory();
}

//---------------------------------- EOF --------------------------------------
