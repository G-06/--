//*****************************************************************************
//
// sprite
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
// include
//*****************************************************************************
#include "fade.h"
#include "sprite.h"
#include "system/system.h"

//=============================================================================
// constructor
//=============================================================================
Fade::Fade(void) :
sprite_(nullptr),
alpha_(0.0f),
rate_(0.0f),
frame_(60),
type_(TYPE_NONE)
{
}

//=============================================================================
// destructor
//=============================================================================
Fade::~Fade(void)
{
}

//=============================================================================
// initialize
//=============================================================================
bool Fade::Initialize(void)
{
	sprite_ = new Sprite();

	sprite_->Initialize();

	sprite_->__position(D3DXVECTOR2(0.0f,0.0f));
	sprite_->__size(D3DXVECTOR2((float)GET_SYSTEM.__window()->__width(),(float)GET_SYSTEM.__window()->__height()));
	sprite_->__color(D3DXCOLOR(1.0f,1.0f,1.0f,alpha_));
	sprite_->SetParameter();

	return true;
}

//=============================================================================
// uninitialize
//=============================================================================
void Fade::Uninitialize (void)
{
	// relase sprite
	SafeRelease(sprite_);
}

//=============================================================================
// update
//=============================================================================
void Fade::Update(void)
{
	alpha_ += rate_;

	if(alpha_ <= 0.0f)
	{
		alpha_ = 0.0f;
		rate_ = 0.0f;
		type_ = TYPE_NONE;
	}

	if(alpha_ >= 1.0f)
	{
		alpha_ = 1.0f;
		rate_ = 0.0f;
		type_ = TYPE_FADE;
	}

	sprite_->__color(D3DXCOLOR(1.0f,1.0f,1.0f,alpha_));
	sprite_->SetParameter();
}

//=============================================================================
// draw
//=============================================================================
void Fade::Draw(void)
{
	sprite_->Draw();
}

//=============================================================================
// start
//=============================================================================
void Fade::Start(const TYPE& type)
{
	type_ = type;

	if(type_ == TYPE_IN)
	{
		rate_ = -1.0f / frame_;
	}

	if(type_ == TYPE_OUT)
	{
		rate_ = 1.0f / frame_;
	}
}

//---------------------------------- EOF --------------------------------------
