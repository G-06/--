//*****************************************************************************
//
// timer
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
// include
//*****************************************************************************
#include "timer.h"

//=============================================================================
// constructor
//=============================================================================
Timer::Timer(void) :
is_start_(false),
is_pause_(false),
current_time_(0),
start_time_(0),
pause_time_(0)
{
}

//=============================================================================
// destructor
//=============================================================================
Timer::~Timer(void)
{
}

//=============================================================================
// initialize
//=============================================================================
bool Timer::Initialize(void)
{
	is_start_ = false;
	is_pause_ = false;
	current_time_ = 0;
	start_time_ = 0;
	pause_time_ = 0;

	return true;
}

//=============================================================================
// uninitialize
//=============================================================================
void Timer::Uninitialize(void)
{
}

//=============================================================================
// start
//=============================================================================
void Timer::Start(void)
{
	if(is_start_)
	{
		if(is_pause_)
		{
			// pause to start
			pause_time_ += timeGetTime() - current_time_;
			is_pause_ = false;
		}
	}
	else
	{
		// stop to start
		start_time_ = timeGetTime();
		pause_time_ = 0;
		is_start_ = true;
		is_pause_ = false;
	}
}

//=============================================================================
// stop
//=============================================================================
u32 Timer::Stop(void)
{
	if(is_start_)
	{
		current_time_ = timeGetTime() - start_time_ - pause_time_;
		is_pause_ = false;
		is_start_ = false;
	}

	return current_time_;
}

//=============================================================================
// pause
//=============================================================================
u32 Timer::Pause(void)
{
	if(is_start_)
	{
		if(!is_pause_)
		{
			// start to pause
			current_time_ = timeGetTime() - start_time_ - pause_time_;
			is_pause_ = true;
		}
	}

	return current_time_;
}

//=============================================================================
// reset
//=============================================================================
void Timer::Reset(void)
{
	start_time_ = timeGetTime();
	pause_time_ = 0;
	is_pause_ = false;
}

//=============================================================================
// get time
//=============================================================================
u32 Timer::GetTime(void)
{
	if(is_start_)
	{
		if(!is_pause_)
		{
			return timeGetTime() - start_time_ - pause_time_;
		}
	}

	return current_time_;
}

//---------------------------------- EOF --------------------------------------
