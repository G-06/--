//*****************************************************************************
//
// thread
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
// include
//*****************************************************************************
#include "thread.h"

//=============================================================================
// constructor
//=============================================================================
Thread::Thread(void) :
handle_(NULL)
{
}

//=============================================================================
// destructor
//=============================================================================
Thread::~Thread(void)
{
}

//=============================================================================
// initialize
//=============================================================================
bool Thread::Initialize(void)
{
	return true;
}

//=============================================================================
// uninitialize
//=============================================================================
void Thread::Uninitialize(void)
{
	Stop();
}

//=============================================================================
// start
//=============================================================================
bool Thread::Start(void* in_func,void* in_arg)
{
	unsigned int thread_id;

	if(handle_ == NULL)
	{
		// ÉXÉåÉbÉhÇÃçÏê¨
		handle_ = (HANDLE)_beginthreadex(NULL,0,(unsigned int(__stdcall*)(void*))in_func,in_arg,0,&thread_id);

		if(handle_ == 0)
		{
			return false;
		}
	}
	else
	{
		return false;
	}

	return true;
}

//=============================================================================
// stop
//=============================================================================
void Thread::Stop(void)
{
	if(handle_ != NULL)
	{
		CloseHandle(handle_);
		handle_ = NULL;
	}
}

//=============================================================================
// wait
//=============================================================================
void Thread::Wait(void)
{
	if(handle_ != NULL)
	{
		WaitForSingleObject(handle_,INFINITE);
	}
}

//---------------------------------- EOF --------------------------------------
